<?php
/**
 * Video
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * OpenAPI spec version: 2.60
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * Video Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Video extends Media 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Video';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'duration_ms' => 'int',
'non_public_metrics' => '\Swagger\Client\Model\VideoNonPublicMetrics',
'organic_metrics' => '\Swagger\Client\Model\VideoOrganicMetrics',
'preview_image_url' => 'string',
'promoted_metrics' => '\Swagger\Client\Model\VideoPromotedMetrics',
'public_metrics' => '\Swagger\Client\Model\VideoPublicMetrics',
'variants' => '\Swagger\Client\Model\Variants'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'duration_ms' => null,
'non_public_metrics' => null,
'organic_metrics' => null,
'preview_image_url' => 'uri',
'promoted_metrics' => null,
'public_metrics' => null,
'variants' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duration_ms' => 'duration_ms',
'non_public_metrics' => 'non_public_metrics',
'organic_metrics' => 'organic_metrics',
'preview_image_url' => 'preview_image_url',
'promoted_metrics' => 'promoted_metrics',
'public_metrics' => 'public_metrics',
'variants' => 'variants'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duration_ms' => 'setDurationMs',
'non_public_metrics' => 'setNonPublicMetrics',
'organic_metrics' => 'setOrganicMetrics',
'preview_image_url' => 'setPreviewImageUrl',
'promoted_metrics' => 'setPromotedMetrics',
'public_metrics' => 'setPublicMetrics',
'variants' => 'setVariants'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duration_ms' => 'getDurationMs',
'non_public_metrics' => 'getNonPublicMetrics',
'organic_metrics' => 'getOrganicMetrics',
'preview_image_url' => 'getPreviewImageUrl',
'promoted_metrics' => 'getPromotedMetrics',
'public_metrics' => 'getPublicMetrics',
'variants' => 'getVariants'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['duration_ms'] = isset($data['duration_ms']) ? $data['duration_ms'] : null;
        $this->container['non_public_metrics'] = isset($data['non_public_metrics']) ? $data['non_public_metrics'] : null;
        $this->container['organic_metrics'] = isset($data['organic_metrics']) ? $data['organic_metrics'] : null;
        $this->container['preview_image_url'] = isset($data['preview_image_url']) ? $data['preview_image_url'] : null;
        $this->container['promoted_metrics'] = isset($data['promoted_metrics']) ? $data['promoted_metrics'] : null;
        $this->container['public_metrics'] = isset($data['public_metrics']) ? $data['public_metrics'] : null;
        $this->container['variants'] = isset($data['variants']) ? $data['variants'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duration_ms
     *
     * @return int
     */
    public function getDurationMs()
    {
        return $this->container['duration_ms'];
    }

    /**
     * Sets duration_ms
     *
     * @param int $duration_ms duration_ms
     *
     * @return $this
     */
    public function setDurationMs($duration_ms)
    {
        $this->container['duration_ms'] = $duration_ms;

        return $this;
    }

    /**
     * Gets non_public_metrics
     *
     * @return \Swagger\Client\Model\VideoNonPublicMetrics
     */
    public function getNonPublicMetrics()
    {
        return $this->container['non_public_metrics'];
    }

    /**
     * Sets non_public_metrics
     *
     * @param \Swagger\Client\Model\VideoNonPublicMetrics $non_public_metrics non_public_metrics
     *
     * @return $this
     */
    public function setNonPublicMetrics($non_public_metrics)
    {
        $this->container['non_public_metrics'] = $non_public_metrics;

        return $this;
    }

    /**
     * Gets organic_metrics
     *
     * @return \Swagger\Client\Model\VideoOrganicMetrics
     */
    public function getOrganicMetrics()
    {
        return $this->container['organic_metrics'];
    }

    /**
     * Sets organic_metrics
     *
     * @param \Swagger\Client\Model\VideoOrganicMetrics $organic_metrics organic_metrics
     *
     * @return $this
     */
    public function setOrganicMetrics($organic_metrics)
    {
        $this->container['organic_metrics'] = $organic_metrics;

        return $this;
    }

    /**
     * Gets preview_image_url
     *
     * @return string
     */
    public function getPreviewImageUrl()
    {
        return $this->container['preview_image_url'];
    }

    /**
     * Sets preview_image_url
     *
     * @param string $preview_image_url preview_image_url
     *
     * @return $this
     */
    public function setPreviewImageUrl($preview_image_url)
    {
        $this->container['preview_image_url'] = $preview_image_url;

        return $this;
    }

    /**
     * Gets promoted_metrics
     *
     * @return \Swagger\Client\Model\VideoPromotedMetrics
     */
    public function getPromotedMetrics()
    {
        return $this->container['promoted_metrics'];
    }

    /**
     * Sets promoted_metrics
     *
     * @param \Swagger\Client\Model\VideoPromotedMetrics $promoted_metrics promoted_metrics
     *
     * @return $this
     */
    public function setPromotedMetrics($promoted_metrics)
    {
        $this->container['promoted_metrics'] = $promoted_metrics;

        return $this;
    }

    /**
     * Gets public_metrics
     *
     * @return \Swagger\Client\Model\VideoPublicMetrics
     */
    public function getPublicMetrics()
    {
        return $this->container['public_metrics'];
    }

    /**
     * Sets public_metrics
     *
     * @param \Swagger\Client\Model\VideoPublicMetrics $public_metrics public_metrics
     *
     * @return $this
     */
    public function setPublicMetrics($public_metrics)
    {
        $this->container['public_metrics'] = $public_metrics;

        return $this;
    }

    /**
     * Gets variants
     *
     * @return \Swagger\Client\Model\Variants
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     *
     * @param \Swagger\Client\Model\Variants $variants variants
     *
     * @return $this
     */
    public function setVariants($variants)
    {
        $this->container['variants'] = $variants;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
