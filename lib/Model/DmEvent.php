<?php
/**
 * DmEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * OpenAPI spec version: 2.60
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DmEvent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DmEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DmEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attachments' => '\Swagger\Client\Model\DmEventAttachments',
'created_at' => '\DateTime',
'dm_conversation_id' => '\Swagger\Client\Model\DmConversationId',
'event_type' => 'string',
'id' => '\Swagger\Client\Model\DmEventId',
'participant_ids' => '\Swagger\Client\Model\UserId[]',
'referenced_tweets' => '\Swagger\Client\Model\DmEventReferencedTweets[]',
'sender_id' => '\Swagger\Client\Model\UserId',
'text' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attachments' => null,
'created_at' => 'date-time',
'dm_conversation_id' => null,
'event_type' => null,
'id' => null,
'participant_ids' => null,
'referenced_tweets' => null,
'sender_id' => null,
'text' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attachments' => 'attachments',
'created_at' => 'created_at',
'dm_conversation_id' => 'dm_conversation_id',
'event_type' => 'event_type',
'id' => 'id',
'participant_ids' => 'participant_ids',
'referenced_tweets' => 'referenced_tweets',
'sender_id' => 'sender_id',
'text' => 'text'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attachments' => 'setAttachments',
'created_at' => 'setCreatedAt',
'dm_conversation_id' => 'setDmConversationId',
'event_type' => 'setEventType',
'id' => 'setId',
'participant_ids' => 'setParticipantIds',
'referenced_tweets' => 'setReferencedTweets',
'sender_id' => 'setSenderId',
'text' => 'setText'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attachments' => 'getAttachments',
'created_at' => 'getCreatedAt',
'dm_conversation_id' => 'getDmConversationId',
'event_type' => 'getEventType',
'id' => 'getId',
'participant_ids' => 'getParticipantIds',
'referenced_tweets' => 'getReferencedTweets',
'sender_id' => 'getSenderId',
'text' => 'getText'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['dm_conversation_id'] = isset($data['dm_conversation_id']) ? $data['dm_conversation_id'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['participant_ids'] = isset($data['participant_ids']) ? $data['participant_ids'] : null;
        $this->container['referenced_tweets'] = isset($data['referenced_tweets']) ? $data['referenced_tweets'] : null;
        $this->container['sender_id'] = isset($data['sender_id']) ? $data['sender_id'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['event_type'] === null) {
            $invalidProperties[] = "'event_type' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attachments
     *
     * @return \Swagger\Client\Model\DmEventAttachments
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Swagger\Client\Model\DmEventAttachments $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets dm_conversation_id
     *
     * @return \Swagger\Client\Model\DmConversationId
     */
    public function getDmConversationId()
    {
        return $this->container['dm_conversation_id'];
    }

    /**
     * Sets dm_conversation_id
     *
     * @param \Swagger\Client\Model\DmConversationId $dm_conversation_id dm_conversation_id
     *
     * @return $this
     */
    public function setDmConversationId($dm_conversation_id)
    {
        $this->container['dm_conversation_id'] = $dm_conversation_id;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string $event_type event_type
     *
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \Swagger\Client\Model\DmEventId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Swagger\Client\Model\DmEventId $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets participant_ids
     *
     * @return \Swagger\Client\Model\UserId[]
     */
    public function getParticipantIds()
    {
        return $this->container['participant_ids'];
    }

    /**
     * Sets participant_ids
     *
     * @param \Swagger\Client\Model\UserId[] $participant_ids A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.
     *
     * @return $this
     */
    public function setParticipantIds($participant_ids)
    {
        $this->container['participant_ids'] = $participant_ids;

        return $this;
    }

    /**
     * Gets referenced_tweets
     *
     * @return \Swagger\Client\Model\DmEventReferencedTweets[]
     */
    public function getReferencedTweets()
    {
        return $this->container['referenced_tweets'];
    }

    /**
     * Sets referenced_tweets
     *
     * @param \Swagger\Client\Model\DmEventReferencedTweets[] $referenced_tweets A list of Tweets this DM refers to.
     *
     * @return $this
     */
    public function setReferencedTweets($referenced_tweets)
    {
        $this->container['referenced_tweets'] = $referenced_tweets;

        return $this;
    }

    /**
     * Gets sender_id
     *
     * @return \Swagger\Client\Model\UserId
     */
    public function getSenderId()
    {
        return $this->container['sender_id'];
    }

    /**
     * Sets sender_id
     *
     * @param \Swagger\Client\Model\UserId $sender_id sender_id
     *
     * @return $this
     */
    public function setSenderId($sender_id)
    {
        $this->container['sender_id'] = $sender_id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
