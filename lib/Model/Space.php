<?php
/**
 * Space
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * OpenAPI spec version: 2.60
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Space Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Space implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Space';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_at' => '\DateTime',
'creator_id' => '\Swagger\Client\Model\UserId',
'ended_at' => '\DateTime',
'host_ids' => '\Swagger\Client\Model\UserId[]',
'id' => '\Swagger\Client\Model\SpaceId',
'invited_user_ids' => '\Swagger\Client\Model\UserId[]',
'is_ticketed' => 'bool',
'lang' => 'string',
'participant_count' => 'int',
'scheduled_start' => '\DateTime',
'speaker_ids' => '\Swagger\Client\Model\UserId[]',
'started_at' => '\DateTime',
'state' => 'string',
'subscriber_count' => 'int',
'title' => 'string',
'topics' => '\Swagger\Client\Model\SpaceTopics[]',
'updated_at' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_at' => 'date-time',
'creator_id' => null,
'ended_at' => 'date-time',
'host_ids' => null,
'id' => null,
'invited_user_ids' => null,
'is_ticketed' => null,
'lang' => null,
'participant_count' => 'int32',
'scheduled_start' => 'date-time',
'speaker_ids' => null,
'started_at' => 'date-time',
'state' => null,
'subscriber_count' => 'int32',
'title' => null,
'topics' => null,
'updated_at' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'created_at',
'creator_id' => 'creator_id',
'ended_at' => 'ended_at',
'host_ids' => 'host_ids',
'id' => 'id',
'invited_user_ids' => 'invited_user_ids',
'is_ticketed' => 'is_ticketed',
'lang' => 'lang',
'participant_count' => 'participant_count',
'scheduled_start' => 'scheduled_start',
'speaker_ids' => 'speaker_ids',
'started_at' => 'started_at',
'state' => 'state',
'subscriber_count' => 'subscriber_count',
'title' => 'title',
'topics' => 'topics',
'updated_at' => 'updated_at'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
'creator_id' => 'setCreatorId',
'ended_at' => 'setEndedAt',
'host_ids' => 'setHostIds',
'id' => 'setId',
'invited_user_ids' => 'setInvitedUserIds',
'is_ticketed' => 'setIsTicketed',
'lang' => 'setLang',
'participant_count' => 'setParticipantCount',
'scheduled_start' => 'setScheduledStart',
'speaker_ids' => 'setSpeakerIds',
'started_at' => 'setStartedAt',
'state' => 'setState',
'subscriber_count' => 'setSubscriberCount',
'title' => 'setTitle',
'topics' => 'setTopics',
'updated_at' => 'setUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
'creator_id' => 'getCreatorId',
'ended_at' => 'getEndedAt',
'host_ids' => 'getHostIds',
'id' => 'getId',
'invited_user_ids' => 'getInvitedUserIds',
'is_ticketed' => 'getIsTicketed',
'lang' => 'getLang',
'participant_count' => 'getParticipantCount',
'scheduled_start' => 'getScheduledStart',
'speaker_ids' => 'getSpeakerIds',
'started_at' => 'getStartedAt',
'state' => 'getState',
'subscriber_count' => 'getSubscriberCount',
'title' => 'getTitle',
'topics' => 'getTopics',
'updated_at' => 'getUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_LIVE = 'live';
const STATE_SCHEDULED = 'scheduled';
const STATE_ENDED = 'ended';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_LIVE,
self::STATE_SCHEDULED,
self::STATE_ENDED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['ended_at'] = isset($data['ended_at']) ? $data['ended_at'] : null;
        $this->container['host_ids'] = isset($data['host_ids']) ? $data['host_ids'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invited_user_ids'] = isset($data['invited_user_ids']) ? $data['invited_user_ids'] : null;
        $this->container['is_ticketed'] = isset($data['is_ticketed']) ? $data['is_ticketed'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['participant_count'] = isset($data['participant_count']) ? $data['participant_count'] : null;
        $this->container['scheduled_start'] = isset($data['scheduled_start']) ? $data['scheduled_start'] : null;
        $this->container['speaker_ids'] = isset($data['speaker_ids']) ? $data['speaker_ids'] : null;
        $this->container['started_at'] = isset($data['started_at']) ? $data['started_at'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['subscriber_count'] = isset($data['subscriber_count']) ? $data['subscriber_count'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['topics'] = isset($data['topics']) ? $data['topics'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation time of the Space.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return \Swagger\Client\Model\UserId
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param \Swagger\Client\Model\UserId $creator_id creator_id
     *
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets ended_at
     *
     * @return \DateTime
     */
    public function getEndedAt()
    {
        return $this->container['ended_at'];
    }

    /**
     * Sets ended_at
     *
     * @param \DateTime $ended_at End time of the Space.
     *
     * @return $this
     */
    public function setEndedAt($ended_at)
    {
        $this->container['ended_at'] = $ended_at;

        return $this;
    }

    /**
     * Gets host_ids
     *
     * @return \Swagger\Client\Model\UserId[]
     */
    public function getHostIds()
    {
        return $this->container['host_ids'];
    }

    /**
     * Sets host_ids
     *
     * @param \Swagger\Client\Model\UserId[] $host_ids The user ids for the hosts of the Space.
     *
     * @return $this
     */
    public function setHostIds($host_ids)
    {
        $this->container['host_ids'] = $host_ids;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \Swagger\Client\Model\SpaceId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Swagger\Client\Model\SpaceId $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invited_user_ids
     *
     * @return \Swagger\Client\Model\UserId[]
     */
    public function getInvitedUserIds()
    {
        return $this->container['invited_user_ids'];
    }

    /**
     * Sets invited_user_ids
     *
     * @param \Swagger\Client\Model\UserId[] $invited_user_ids An array of user ids for people who were invited to a Space.
     *
     * @return $this
     */
    public function setInvitedUserIds($invited_user_ids)
    {
        $this->container['invited_user_ids'] = $invited_user_ids;

        return $this;
    }

    /**
     * Gets is_ticketed
     *
     * @return bool
     */
    public function getIsTicketed()
    {
        return $this->container['is_ticketed'];
    }

    /**
     * Sets is_ticketed
     *
     * @param bool $is_ticketed Denotes if the Space is a ticketed Space.
     *
     * @return $this
     */
    public function setIsTicketed($is_ticketed)
    {
        $this->container['is_ticketed'] = $is_ticketed;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang The language of the Space.
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets participant_count
     *
     * @return int
     */
    public function getParticipantCount()
    {
        return $this->container['participant_count'];
    }

    /**
     * Sets participant_count
     *
     * @param int $participant_count The number of participants in a Space.
     *
     * @return $this
     */
    public function setParticipantCount($participant_count)
    {
        $this->container['participant_count'] = $participant_count;

        return $this;
    }

    /**
     * Gets scheduled_start
     *
     * @return \DateTime
     */
    public function getScheduledStart()
    {
        return $this->container['scheduled_start'];
    }

    /**
     * Sets scheduled_start
     *
     * @param \DateTime $scheduled_start A date time stamp for when a Space is scheduled to begin.
     *
     * @return $this
     */
    public function setScheduledStart($scheduled_start)
    {
        $this->container['scheduled_start'] = $scheduled_start;

        return $this;
    }

    /**
     * Gets speaker_ids
     *
     * @return \Swagger\Client\Model\UserId[]
     */
    public function getSpeakerIds()
    {
        return $this->container['speaker_ids'];
    }

    /**
     * Sets speaker_ids
     *
     * @param \Swagger\Client\Model\UserId[] $speaker_ids An array of user ids for people who were speakers in a Space.
     *
     * @return $this
     */
    public function setSpeakerIds($speaker_ids)
    {
        $this->container['speaker_ids'] = $speaker_ids;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return \DateTime
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param \DateTime $started_at When the Space was started as a date string.
     *
     * @return $this
     */
    public function setStartedAt($started_at)
    {
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The current state of the Space.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets subscriber_count
     *
     * @return int
     */
    public function getSubscriberCount()
    {
        return $this->container['subscriber_count'];
    }

    /**
     * Sets subscriber_count
     *
     * @param int $subscriber_count The number of people who have either purchased a ticket or set a reminder for this Space.
     *
     * @return $this
     */
    public function setSubscriberCount($subscriber_count)
    {
        $this->container['subscriber_count'] = $subscriber_count;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the Space.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets topics
     *
     * @return \Swagger\Client\Model\SpaceTopics[]
     */
    public function getTopics()
    {
        return $this->container['topics'];
    }

    /**
     * Sets topics
     *
     * @param \Swagger\Client\Model\SpaceTopics[] $topics The topics of a Space, as selected by its creator.
     *
     * @return $this
     */
    public function setTopics($topics)
    {
        $this->container['topics'] = $topics;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at When the Space was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
