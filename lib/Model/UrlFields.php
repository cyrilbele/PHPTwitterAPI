<?php
/**
 * UrlFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * OpenAPI spec version: 2.60
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UrlFields Class Doc Comment
 *
 * @category Class
 * @description Represent the portion of text recognized as a URL.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UrlFields implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UrlFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
'display_url' => 'string',
'expanded_url' => '\Swagger\Client\Model\Url',
'images' => '\Swagger\Client\Model\UrlImage[]',
'media_key' => '\Swagger\Client\Model\MediaKey',
'status' => '\Swagger\Client\Model\HttpStatusCode',
'title' => 'string',
'unwound_url' => 'string',
'url' => '\Swagger\Client\Model\Url'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
'display_url' => null,
'expanded_url' => null,
'images' => null,
'media_key' => null,
'status' => null,
'title' => null,
'unwound_url' => 'uri',
'url' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
'display_url' => 'display_url',
'expanded_url' => 'expanded_url',
'images' => 'images',
'media_key' => 'media_key',
'status' => 'status',
'title' => 'title',
'unwound_url' => 'unwound_url',
'url' => 'url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
'display_url' => 'setDisplayUrl',
'expanded_url' => 'setExpandedUrl',
'images' => 'setImages',
'media_key' => 'setMediaKey',
'status' => 'setStatus',
'title' => 'setTitle',
'unwound_url' => 'setUnwoundUrl',
'url' => 'setUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
'display_url' => 'getDisplayUrl',
'expanded_url' => 'getExpandedUrl',
'images' => 'getImages',
'media_key' => 'getMediaKey',
'status' => 'getStatus',
'title' => 'getTitle',
'unwound_url' => 'getUnwoundUrl',
'url' => 'getUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['display_url'] = isset($data['display_url']) ? $data['display_url'] : null;
        $this->container['expanded_url'] = isset($data['expanded_url']) ? $data['expanded_url'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['media_key'] = isset($data['media_key']) ? $data['media_key'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['unwound_url'] = isset($data['unwound_url']) ? $data['unwound_url'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the URL landing page.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_url
     *
     * @return string
     */
    public function getDisplayUrl()
    {
        return $this->container['display_url'];
    }

    /**
     * Sets display_url
     *
     * @param string $display_url The URL as displayed in the Twitter client.
     *
     * @return $this
     */
    public function setDisplayUrl($display_url)
    {
        $this->container['display_url'] = $display_url;

        return $this;
    }

    /**
     * Gets expanded_url
     *
     * @return \Swagger\Client\Model\Url
     */
    public function getExpandedUrl()
    {
        return $this->container['expanded_url'];
    }

    /**
     * Sets expanded_url
     *
     * @param \Swagger\Client\Model\Url $expanded_url expanded_url
     *
     * @return $this
     */
    public function setExpandedUrl($expanded_url)
    {
        $this->container['expanded_url'] = $expanded_url;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Swagger\Client\Model\UrlImage[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Swagger\Client\Model\UrlImage[] $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets media_key
     *
     * @return \Swagger\Client\Model\MediaKey
     */
    public function getMediaKey()
    {
        return $this->container['media_key'];
    }

    /**
     * Sets media_key
     *
     * @param \Swagger\Client\Model\MediaKey $media_key media_key
     *
     * @return $this
     */
    public function setMediaKey($media_key)
    {
        $this->container['media_key'] = $media_key;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\HttpStatusCode
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\HttpStatusCode $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the page the URL points to.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets unwound_url
     *
     * @return string
     */
    public function getUnwoundUrl()
    {
        return $this->container['unwound_url'];
    }

    /**
     * Sets unwound_url
     *
     * @param string $unwound_url Fully resolved url.
     *
     * @return $this
     */
    public function setUnwoundUrl($unwound_url)
    {
        $this->container['unwound_url'] = $unwound_url;

        return $this;
    }

    /**
     * Gets url
     *
     * @return \Swagger\Client\Model\Url
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param \Swagger\Client\Model\Url $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
