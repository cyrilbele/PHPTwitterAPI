<?php
/**
 * Poll
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * OpenAPI spec version: 2.60
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Poll Class Doc Comment
 *
 * @category Class
 * @description Represent a Poll attached to a Tweet.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Poll implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Poll';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'duration_minutes' => 'int',
'end_datetime' => '\DateTime',
'id' => '\Swagger\Client\Model\PollId',
'options' => '\Swagger\Client\Model\PollOption[]',
'voting_status' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'duration_minutes' => 'int32',
'end_datetime' => 'date-time',
'id' => null,
'options' => null,
'voting_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duration_minutes' => 'duration_minutes',
'end_datetime' => 'end_datetime',
'id' => 'id',
'options' => 'options',
'voting_status' => 'voting_status'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duration_minutes' => 'setDurationMinutes',
'end_datetime' => 'setEndDatetime',
'id' => 'setId',
'options' => 'setOptions',
'voting_status' => 'setVotingStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duration_minutes' => 'getDurationMinutes',
'end_datetime' => 'getEndDatetime',
'id' => 'getId',
'options' => 'getOptions',
'voting_status' => 'getVotingStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VOTING_STATUS_OPEN = 'open';
const VOTING_STATUS_CLOSED = 'closed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVotingStatusAllowableValues()
    {
        return [
            self::VOTING_STATUS_OPEN,
self::VOTING_STATUS_CLOSED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['duration_minutes'] = isset($data['duration_minutes']) ? $data['duration_minutes'] : null;
        $this->container['end_datetime'] = isset($data['end_datetime']) ? $data['end_datetime'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['voting_status'] = isset($data['voting_status']) ? $data['voting_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['options'] === null) {
            $invalidProperties[] = "'options' can't be null";
        }
        $allowedValues = $this->getVotingStatusAllowableValues();
        if (!is_null($this->container['voting_status']) && !in_array($this->container['voting_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voting_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duration_minutes
     *
     * @return int
     */
    public function getDurationMinutes()
    {
        return $this->container['duration_minutes'];
    }

    /**
     * Sets duration_minutes
     *
     * @param int $duration_minutes duration_minutes
     *
     * @return $this
     */
    public function setDurationMinutes($duration_minutes)
    {
        $this->container['duration_minutes'] = $duration_minutes;

        return $this;
    }

    /**
     * Gets end_datetime
     *
     * @return \DateTime
     */
    public function getEndDatetime()
    {
        return $this->container['end_datetime'];
    }

    /**
     * Sets end_datetime
     *
     * @param \DateTime $end_datetime end_datetime
     *
     * @return $this
     */
    public function setEndDatetime($end_datetime)
    {
        $this->container['end_datetime'] = $end_datetime;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \Swagger\Client\Model\PollId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Swagger\Client\Model\PollId $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Swagger\Client\Model\PollOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Swagger\Client\Model\PollOption[] $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets voting_status
     *
     * @return string
     */
    public function getVotingStatus()
    {
        return $this->container['voting_status'];
    }

    /**
     * Sets voting_status
     *
     * @param string $voting_status voting_status
     *
     * @return $this
     */
    public function setVotingStatus($voting_status)
    {
        $allowedValues = $this->getVotingStatusAllowableValues();
        if (!is_null($voting_status) && !in_array($voting_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voting_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voting_status'] = $voting_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
