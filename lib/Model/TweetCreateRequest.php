<?php
/**
 * TweetCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * OpenAPI spec version: 2.60
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TweetCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TweetCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TweetCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'card_uri' => 'string',
'direct_message_deep_link' => 'string',
'for_super_followers_only' => 'bool',
'geo' => '\Swagger\Client\Model\TweetCreateRequestGeo',
'media' => '\Swagger\Client\Model\TweetCreateRequestMedia',
'nullcast' => 'bool',
'poll' => '\Swagger\Client\Model\TweetCreateRequestPoll',
'quote_tweet_id' => '\Swagger\Client\Model\TweetId',
'reply' => '\Swagger\Client\Model\TweetCreateRequestReply',
'reply_settings' => 'string',
'text' => '\Swagger\Client\Model\TweetText'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'card_uri' => null,
'direct_message_deep_link' => null,
'for_super_followers_only' => null,
'geo' => null,
'media' => null,
'nullcast' => null,
'poll' => null,
'quote_tweet_id' => null,
'reply' => null,
'reply_settings' => null,
'text' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_uri' => 'card_uri',
'direct_message_deep_link' => 'direct_message_deep_link',
'for_super_followers_only' => 'for_super_followers_only',
'geo' => 'geo',
'media' => 'media',
'nullcast' => 'nullcast',
'poll' => 'poll',
'quote_tweet_id' => 'quote_tweet_id',
'reply' => 'reply',
'reply_settings' => 'reply_settings',
'text' => 'text'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_uri' => 'setCardUri',
'direct_message_deep_link' => 'setDirectMessageDeepLink',
'for_super_followers_only' => 'setForSuperFollowersOnly',
'geo' => 'setGeo',
'media' => 'setMedia',
'nullcast' => 'setNullcast',
'poll' => 'setPoll',
'quote_tweet_id' => 'setQuoteTweetId',
'reply' => 'setReply',
'reply_settings' => 'setReplySettings',
'text' => 'setText'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_uri' => 'getCardUri',
'direct_message_deep_link' => 'getDirectMessageDeepLink',
'for_super_followers_only' => 'getForSuperFollowersOnly',
'geo' => 'getGeo',
'media' => 'getMedia',
'nullcast' => 'getNullcast',
'poll' => 'getPoll',
'quote_tweet_id' => 'getQuoteTweetId',
'reply' => 'getReply',
'reply_settings' => 'getReplySettings',
'text' => 'getText'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REPLY_SETTINGS_FOLLOWING = 'following';
const REPLY_SETTINGS_MENTIONED_USERS = 'mentionedUsers';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReplySettingsAllowableValues()
    {
        return [
            self::REPLY_SETTINGS_FOLLOWING,
self::REPLY_SETTINGS_MENTIONED_USERS,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_uri'] = isset($data['card_uri']) ? $data['card_uri'] : null;
        $this->container['direct_message_deep_link'] = isset($data['direct_message_deep_link']) ? $data['direct_message_deep_link'] : null;
        $this->container['for_super_followers_only'] = isset($data['for_super_followers_only']) ? $data['for_super_followers_only'] : false;
        $this->container['geo'] = isset($data['geo']) ? $data['geo'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['nullcast'] = isset($data['nullcast']) ? $data['nullcast'] : false;
        $this->container['poll'] = isset($data['poll']) ? $data['poll'] : null;
        $this->container['quote_tweet_id'] = isset($data['quote_tweet_id']) ? $data['quote_tweet_id'] : null;
        $this->container['reply'] = isset($data['reply']) ? $data['reply'] : null;
        $this->container['reply_settings'] = isset($data['reply_settings']) ? $data['reply_settings'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReplySettingsAllowableValues();
        if (!is_null($this->container['reply_settings']) && !in_array($this->container['reply_settings'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reply_settings', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_uri
     *
     * @return string
     */
    public function getCardUri()
    {
        return $this->container['card_uri'];
    }

    /**
     * Sets card_uri
     *
     * @param string $card_uri Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.
     *
     * @return $this
     */
    public function setCardUri($card_uri)
    {
        $this->container['card_uri'] = $card_uri;

        return $this;
    }

    /**
     * Gets direct_message_deep_link
     *
     * @return string
     */
    public function getDirectMessageDeepLink()
    {
        return $this->container['direct_message_deep_link'];
    }

    /**
     * Sets direct_message_deep_link
     *
     * @param string $direct_message_deep_link Link to take the conversation from the public timeline to a private Direct Message.
     *
     * @return $this
     */
    public function setDirectMessageDeepLink($direct_message_deep_link)
    {
        $this->container['direct_message_deep_link'] = $direct_message_deep_link;

        return $this;
    }

    /**
     * Gets for_super_followers_only
     *
     * @return bool
     */
    public function getForSuperFollowersOnly()
    {
        return $this->container['for_super_followers_only'];
    }

    /**
     * Sets for_super_followers_only
     *
     * @param bool $for_super_followers_only Exclusive Tweet for super followers.
     *
     * @return $this
     */
    public function setForSuperFollowersOnly($for_super_followers_only)
    {
        $this->container['for_super_followers_only'] = $for_super_followers_only;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return \Swagger\Client\Model\TweetCreateRequestGeo
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param \Swagger\Client\Model\TweetCreateRequestGeo $geo geo
     *
     * @return $this
     */
    public function setGeo($geo)
    {
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Swagger\Client\Model\TweetCreateRequestMedia
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Swagger\Client\Model\TweetCreateRequestMedia $media media
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets nullcast
     *
     * @return bool
     */
    public function getNullcast()
    {
        return $this->container['nullcast'];
    }

    /**
     * Sets nullcast
     *
     * @param bool $nullcast Nullcasted (promoted-only) Tweets do not appear in the public timeline and are not served to followers.
     *
     * @return $this
     */
    public function setNullcast($nullcast)
    {
        $this->container['nullcast'] = $nullcast;

        return $this;
    }

    /**
     * Gets poll
     *
     * @return \Swagger\Client\Model\TweetCreateRequestPoll
     */
    public function getPoll()
    {
        return $this->container['poll'];
    }

    /**
     * Sets poll
     *
     * @param \Swagger\Client\Model\TweetCreateRequestPoll $poll poll
     *
     * @return $this
     */
    public function setPoll($poll)
    {
        $this->container['poll'] = $poll;

        return $this;
    }

    /**
     * Gets quote_tweet_id
     *
     * @return \Swagger\Client\Model\TweetId
     */
    public function getQuoteTweetId()
    {
        return $this->container['quote_tweet_id'];
    }

    /**
     * Sets quote_tweet_id
     *
     * @param \Swagger\Client\Model\TweetId $quote_tweet_id quote_tweet_id
     *
     * @return $this
     */
    public function setQuoteTweetId($quote_tweet_id)
    {
        $this->container['quote_tweet_id'] = $quote_tweet_id;

        return $this;
    }

    /**
     * Gets reply
     *
     * @return \Swagger\Client\Model\TweetCreateRequestReply
     */
    public function getReply()
    {
        return $this->container['reply'];
    }

    /**
     * Sets reply
     *
     * @param \Swagger\Client\Model\TweetCreateRequestReply $reply reply
     *
     * @return $this
     */
    public function setReply($reply)
    {
        $this->container['reply'] = $reply;

        return $this;
    }

    /**
     * Gets reply_settings
     *
     * @return string
     */
    public function getReplySettings()
    {
        return $this->container['reply_settings'];
    }

    /**
     * Sets reply_settings
     *
     * @param string $reply_settings Settings to indicate who can reply to the Tweet.
     *
     * @return $this
     */
    public function setReplySettings($reply_settings)
    {
        $allowedValues = $this->getReplySettingsAllowableValues();
        if (!is_null($reply_settings) && !in_array($reply_settings, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reply_settings', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reply_settings'] = $reply_settings;

        return $this;
    }

    /**
     * Gets text
     *
     * @return \Swagger\Client\Model\TweetText
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param \Swagger\Client\Model\TweetText $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
