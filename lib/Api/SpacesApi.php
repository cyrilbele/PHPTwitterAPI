<?php
/**
 * SpacesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * OpenAPI spec version: 2.60
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SpacesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SpacesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation findSpaceById
     *
     * Space lookup by Space ID
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Get2SpacesIdResponse
     */
    public function findSpaceById($id, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        list($response) = $this->findSpaceByIdWithHttpInfo($id, $space_fields, $expansions, $user_fields, $topic_fields);
        return $response;
    }

    /**
     * Operation findSpaceByIdWithHttpInfo
     *
     * Space lookup by Space ID
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Get2SpacesIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findSpaceByIdWithHttpInfo($id, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesIdResponse';
        $request = $this->findSpaceByIdRequest($id, $space_fields, $expansions, $user_fields, $topic_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Get2SpacesIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findSpaceByIdAsync
     *
     * Space lookup by Space ID
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSpaceByIdAsync($id, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        return $this->findSpaceByIdAsyncWithHttpInfo($id, $space_fields, $expansions, $user_fields, $topic_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findSpaceByIdAsyncWithHttpInfo
     *
     * Space lookup by Space ID
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSpaceByIdAsyncWithHttpInfo($id, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesIdResponse';
        $request = $this->findSpaceByIdRequest($id, $space_fields, $expansions, $user_fields, $topic_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findSpaceById'
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findSpaceByIdRequest($id, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findSpaceById'
            );
        }

        $resourcePath = '/2/spaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($space_fields)) {
            $space_fields = ObjectSerializer::serializeCollection($space_fields, 'csv', true);
        }
        if ($space_fields !== null) {
            $queryParams['space.fields'] = ObjectSerializer::toQueryValue($space_fields, null);
        }
        // query params
        if (is_array($expansions)) {
            $expansions = ObjectSerializer::serializeCollection($expansions, 'csv', true);
        }
        if ($expansions !== null) {
            $queryParams['expansions'] = ObjectSerializer::toQueryValue($expansions, null);
        }
        // query params
        if (is_array($user_fields)) {
            $user_fields = ObjectSerializer::serializeCollection($user_fields, 'csv', true);
        }
        if ($user_fields !== null) {
            $queryParams['user.fields'] = ObjectSerializer::toQueryValue($user_fields, null);
        }
        // query params
        if (is_array($topic_fields)) {
            $topic_fields = ObjectSerializer::serializeCollection($topic_fields, 'csv', true);
        }
        if ($topic_fields !== null) {
            $queryParams['topic.fields'] = ObjectSerializer::toQueryValue($topic_fields, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findSpacesByCreatorIds
     *
     * Space lookup by their creators
     *
     * @param  \Swagger\Client\Model\UserId[] $user_ids The IDs of Users to search through. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Get2SpacesByCreatorIdsResponse
     */
    public function findSpacesByCreatorIds($user_ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        list($response) = $this->findSpacesByCreatorIdsWithHttpInfo($user_ids, $space_fields, $expansions, $user_fields, $topic_fields);
        return $response;
    }

    /**
     * Operation findSpacesByCreatorIdsWithHttpInfo
     *
     * Space lookup by their creators
     *
     * @param  \Swagger\Client\Model\UserId[] $user_ids The IDs of Users to search through. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Get2SpacesByCreatorIdsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findSpacesByCreatorIdsWithHttpInfo($user_ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesByCreatorIdsResponse';
        $request = $this->findSpacesByCreatorIdsRequest($user_ids, $space_fields, $expansions, $user_fields, $topic_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Get2SpacesByCreatorIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findSpacesByCreatorIdsAsync
     *
     * Space lookup by their creators
     *
     * @param  \Swagger\Client\Model\UserId[] $user_ids The IDs of Users to search through. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSpacesByCreatorIdsAsync($user_ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        return $this->findSpacesByCreatorIdsAsyncWithHttpInfo($user_ids, $space_fields, $expansions, $user_fields, $topic_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findSpacesByCreatorIdsAsyncWithHttpInfo
     *
     * Space lookup by their creators
     *
     * @param  \Swagger\Client\Model\UserId[] $user_ids The IDs of Users to search through. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSpacesByCreatorIdsAsyncWithHttpInfo($user_ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesByCreatorIdsResponse';
        $request = $this->findSpacesByCreatorIdsRequest($user_ids, $space_fields, $expansions, $user_fields, $topic_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findSpacesByCreatorIds'
     *
     * @param  \Swagger\Client\Model\UserId[] $user_ids The IDs of Users to search through. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findSpacesByCreatorIdsRequest($user_ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        // verify the required parameter 'user_ids' is set
        if ($user_ids === null || (is_array($user_ids) && count($user_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_ids when calling findSpacesByCreatorIds'
            );
        }

        $resourcePath = '/2/spaces/by/creator_ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($user_ids)) {
            $user_ids = ObjectSerializer::serializeCollection($user_ids, 'multi', true);
        }
        if ($user_ids !== null) {
            $queryParams['user_ids'] = ObjectSerializer::toQueryValue($user_ids, null);
        }
        // query params
        if (is_array($space_fields)) {
            $space_fields = ObjectSerializer::serializeCollection($space_fields, 'csv', true);
        }
        if ($space_fields !== null) {
            $queryParams['space.fields'] = ObjectSerializer::toQueryValue($space_fields, null);
        }
        // query params
        if (is_array($expansions)) {
            $expansions = ObjectSerializer::serializeCollection($expansions, 'csv', true);
        }
        if ($expansions !== null) {
            $queryParams['expansions'] = ObjectSerializer::toQueryValue($expansions, null);
        }
        // query params
        if (is_array($user_fields)) {
            $user_fields = ObjectSerializer::serializeCollection($user_fields, 'csv', true);
        }
        if ($user_fields !== null) {
            $queryParams['user.fields'] = ObjectSerializer::toQueryValue($user_fields, null);
        }
        // query params
        if (is_array($topic_fields)) {
            $topic_fields = ObjectSerializer::serializeCollection($topic_fields, 'csv', true);
        }
        if ($topic_fields !== null) {
            $queryParams['topic.fields'] = ObjectSerializer::toQueryValue($topic_fields, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findSpacesByIds
     *
     * Space lookup up Space IDs
     *
     * @param  string[] $ids The list of Space IDs to return. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Get2SpacesResponse
     */
    public function findSpacesByIds($ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        list($response) = $this->findSpacesByIdsWithHttpInfo($ids, $space_fields, $expansions, $user_fields, $topic_fields);
        return $response;
    }

    /**
     * Operation findSpacesByIdsWithHttpInfo
     *
     * Space lookup up Space IDs
     *
     * @param  string[] $ids The list of Space IDs to return. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Get2SpacesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findSpacesByIdsWithHttpInfo($ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesResponse';
        $request = $this->findSpacesByIdsRequest($ids, $space_fields, $expansions, $user_fields, $topic_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Get2SpacesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findSpacesByIdsAsync
     *
     * Space lookup up Space IDs
     *
     * @param  string[] $ids The list of Space IDs to return. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSpacesByIdsAsync($ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        return $this->findSpacesByIdsAsyncWithHttpInfo($ids, $space_fields, $expansions, $user_fields, $topic_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findSpacesByIdsAsyncWithHttpInfo
     *
     * Space lookup up Space IDs
     *
     * @param  string[] $ids The list of Space IDs to return. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSpacesByIdsAsyncWithHttpInfo($ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesResponse';
        $request = $this->findSpacesByIdsRequest($ids, $space_fields, $expansions, $user_fields, $topic_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findSpacesByIds'
     *
     * @param  string[] $ids The list of Space IDs to return. (required)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findSpacesByIdsRequest($ids, $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling findSpacesByIds'
            );
        }

        $resourcePath = '/2/spaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'multi', true);
        }
        if ($ids !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($ids, null);
        }
        // query params
        if (is_array($space_fields)) {
            $space_fields = ObjectSerializer::serializeCollection($space_fields, 'csv', true);
        }
        if ($space_fields !== null) {
            $queryParams['space.fields'] = ObjectSerializer::toQueryValue($space_fields, null);
        }
        // query params
        if (is_array($expansions)) {
            $expansions = ObjectSerializer::serializeCollection($expansions, 'csv', true);
        }
        if ($expansions !== null) {
            $queryParams['expansions'] = ObjectSerializer::toQueryValue($expansions, null);
        }
        // query params
        if (is_array($user_fields)) {
            $user_fields = ObjectSerializer::serializeCollection($user_fields, 'csv', true);
        }
        if ($user_fields !== null) {
            $queryParams['user.fields'] = ObjectSerializer::toQueryValue($user_fields, null);
        }
        // query params
        if (is_array($topic_fields)) {
            $topic_fields = ObjectSerializer::serializeCollection($topic_fields, 'csv', true);
        }
        if ($topic_fields !== null) {
            $queryParams['topic.fields'] = ObjectSerializer::toQueryValue($topic_fields, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchSpaces
     *
     * Search for Spaces
     *
     * @param  string $query The search query. (required)
     * @param  string $state The state of Spaces to search for. (optional, default to all)
     * @param  int $max_results The number of results to return. (optional, default to 100)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Get2SpacesSearchResponse
     */
    public function searchSpaces($query, $state = 'all', $max_results = '100', $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        list($response) = $this->searchSpacesWithHttpInfo($query, $state, $max_results, $space_fields, $expansions, $user_fields, $topic_fields);
        return $response;
    }

    /**
     * Operation searchSpacesWithHttpInfo
     *
     * Search for Spaces
     *
     * @param  string $query The search query. (required)
     * @param  string $state The state of Spaces to search for. (optional, default to all)
     * @param  int $max_results The number of results to return. (optional, default to 100)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Get2SpacesSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSpacesWithHttpInfo($query, $state = 'all', $max_results = '100', $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesSearchResponse';
        $request = $this->searchSpacesRequest($query, $state, $max_results, $space_fields, $expansions, $user_fields, $topic_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Get2SpacesSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchSpacesAsync
     *
     * Search for Spaces
     *
     * @param  string $query The search query. (required)
     * @param  string $state The state of Spaces to search for. (optional, default to all)
     * @param  int $max_results The number of results to return. (optional, default to 100)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSpacesAsync($query, $state = 'all', $max_results = '100', $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        return $this->searchSpacesAsyncWithHttpInfo($query, $state, $max_results, $space_fields, $expansions, $user_fields, $topic_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchSpacesAsyncWithHttpInfo
     *
     * Search for Spaces
     *
     * @param  string $query The search query. (required)
     * @param  string $state The state of Spaces to search for. (optional, default to all)
     * @param  int $max_results The number of results to return. (optional, default to 100)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSpacesAsyncWithHttpInfo($query, $state = 'all', $max_results = '100', $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesSearchResponse';
        $request = $this->searchSpacesRequest($query, $state, $max_results, $space_fields, $expansions, $user_fields, $topic_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchSpaces'
     *
     * @param  string $query The search query. (required)
     * @param  string $state The state of Spaces to search for. (optional, default to all)
     * @param  int $max_results The number of results to return. (optional, default to 100)
     * @param  string[] $space_fields A comma separated list of Space fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $topic_fields A comma separated list of Topic fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchSpacesRequest($query, $state = 'all', $max_results = '100', $space_fields = null, $expansions = null, $user_fields = null, $topic_fields = null)
    {
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling searchSpaces'
            );
        }

        $resourcePath = '/2/spaces/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['max_results'] = ObjectSerializer::toQueryValue($max_results, 'int32');
        }
        // query params
        if (is_array($space_fields)) {
            $space_fields = ObjectSerializer::serializeCollection($space_fields, 'csv', true);
        }
        if ($space_fields !== null) {
            $queryParams['space.fields'] = ObjectSerializer::toQueryValue($space_fields, null);
        }
        // query params
        if (is_array($expansions)) {
            $expansions = ObjectSerializer::serializeCollection($expansions, 'csv', true);
        }
        if ($expansions !== null) {
            $queryParams['expansions'] = ObjectSerializer::toQueryValue($expansions, null);
        }
        // query params
        if (is_array($user_fields)) {
            $user_fields = ObjectSerializer::serializeCollection($user_fields, 'csv', true);
        }
        if ($user_fields !== null) {
            $queryParams['user.fields'] = ObjectSerializer::toQueryValue($user_fields, null);
        }
        // query params
        if (is_array($topic_fields)) {
            $topic_fields = ObjectSerializer::serializeCollection($topic_fields, 'csv', true);
        }
        if ($topic_fields !== null) {
            $queryParams['topic.fields'] = ObjectSerializer::toQueryValue($topic_fields, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation spaceBuyers
     *
     * Retrieve the list of Users who purchased a ticket to the given space
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  \Swagger\Client\Model\PaginationToken32 $pagination_token This parameter is used to get a specified &#x27;page&#x27; of results. (optional)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Get2SpacesIdBuyersResponse
     */
    public function spaceBuyers($id, $pagination_token = null, $max_results = '100', $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        list($response) = $this->spaceBuyersWithHttpInfo($id, $pagination_token, $max_results, $user_fields, $expansions, $tweet_fields);
        return $response;
    }

    /**
     * Operation spaceBuyersWithHttpInfo
     *
     * Retrieve the list of Users who purchased a ticket to the given space
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  \Swagger\Client\Model\PaginationToken32 $pagination_token This parameter is used to get a specified &#x27;page&#x27; of results. (optional)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Get2SpacesIdBuyersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function spaceBuyersWithHttpInfo($id, $pagination_token = null, $max_results = '100', $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesIdBuyersResponse';
        $request = $this->spaceBuyersRequest($id, $pagination_token, $max_results, $user_fields, $expansions, $tweet_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Get2SpacesIdBuyersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation spaceBuyersAsync
     *
     * Retrieve the list of Users who purchased a ticket to the given space
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  \Swagger\Client\Model\PaginationToken32 $pagination_token This parameter is used to get a specified &#x27;page&#x27; of results. (optional)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spaceBuyersAsync($id, $pagination_token = null, $max_results = '100', $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        return $this->spaceBuyersAsyncWithHttpInfo($id, $pagination_token, $max_results, $user_fields, $expansions, $tweet_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation spaceBuyersAsyncWithHttpInfo
     *
     * Retrieve the list of Users who purchased a ticket to the given space
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  \Swagger\Client\Model\PaginationToken32 $pagination_token This parameter is used to get a specified &#x27;page&#x27; of results. (optional)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spaceBuyersAsyncWithHttpInfo($id, $pagination_token = null, $max_results = '100', $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesIdBuyersResponse';
        $request = $this->spaceBuyersRequest($id, $pagination_token, $max_results, $user_fields, $expansions, $tweet_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'spaceBuyers'
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  \Swagger\Client\Model\PaginationToken32 $pagination_token This parameter is used to get a specified &#x27;page&#x27; of results. (optional)
     * @param  int $max_results The maximum number of results. (optional, default to 100)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function spaceBuyersRequest($id, $pagination_token = null, $max_results = '100', $user_fields = null, $expansions = null, $tweet_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling spaceBuyers'
            );
        }

        $resourcePath = '/2/spaces/{id}/buyers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pagination_token !== null) {
            $queryParams['pagination_token'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['max_results'] = ObjectSerializer::toQueryValue($max_results, 'int32');
        }
        // query params
        if (is_array($user_fields)) {
            $user_fields = ObjectSerializer::serializeCollection($user_fields, 'csv', true);
        }
        if ($user_fields !== null) {
            $queryParams['user.fields'] = ObjectSerializer::toQueryValue($user_fields, null);
        }
        // query params
        if (is_array($expansions)) {
            $expansions = ObjectSerializer::serializeCollection($expansions, 'csv', true);
        }
        if ($expansions !== null) {
            $queryParams['expansions'] = ObjectSerializer::toQueryValue($expansions, null);
        }
        // query params
        if (is_array($tweet_fields)) {
            $tweet_fields = ObjectSerializer::serializeCollection($tweet_fields, 'csv', true);
        }
        if ($tweet_fields !== null) {
            $queryParams['tweet.fields'] = ObjectSerializer::toQueryValue($tweet_fields, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation spaceTweets
     *
     * Retrieve Tweets from a Space.
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  int $max_results The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $media_fields A comma separated list of Media fields to display. (optional)
     * @param  string[] $poll_fields A comma separated list of Poll fields to display. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $place_fields A comma separated list of Place fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Get2SpacesIdTweetsResponse
     */
    public function spaceTweets($id, $max_results = '100', $tweet_fields = null, $expansions = null, $media_fields = null, $poll_fields = null, $user_fields = null, $place_fields = null)
    {
        list($response) = $this->spaceTweetsWithHttpInfo($id, $max_results, $tweet_fields, $expansions, $media_fields, $poll_fields, $user_fields, $place_fields);
        return $response;
    }

    /**
     * Operation spaceTweetsWithHttpInfo
     *
     * Retrieve Tweets from a Space.
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  int $max_results The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $media_fields A comma separated list of Media fields to display. (optional)
     * @param  string[] $poll_fields A comma separated list of Poll fields to display. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $place_fields A comma separated list of Place fields to display. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Get2SpacesIdTweetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function spaceTweetsWithHttpInfo($id, $max_results = '100', $tweet_fields = null, $expansions = null, $media_fields = null, $poll_fields = null, $user_fields = null, $place_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesIdTweetsResponse';
        $request = $this->spaceTweetsRequest($id, $max_results, $tweet_fields, $expansions, $media_fields, $poll_fields, $user_fields, $place_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Get2SpacesIdTweetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation spaceTweetsAsync
     *
     * Retrieve Tweets from a Space.
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  int $max_results The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $media_fields A comma separated list of Media fields to display. (optional)
     * @param  string[] $poll_fields A comma separated list of Poll fields to display. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $place_fields A comma separated list of Place fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spaceTweetsAsync($id, $max_results = '100', $tweet_fields = null, $expansions = null, $media_fields = null, $poll_fields = null, $user_fields = null, $place_fields = null)
    {
        return $this->spaceTweetsAsyncWithHttpInfo($id, $max_results, $tweet_fields, $expansions, $media_fields, $poll_fields, $user_fields, $place_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation spaceTweetsAsyncWithHttpInfo
     *
     * Retrieve Tweets from a Space.
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  int $max_results The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $media_fields A comma separated list of Media fields to display. (optional)
     * @param  string[] $poll_fields A comma separated list of Poll fields to display. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $place_fields A comma separated list of Place fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function spaceTweetsAsyncWithHttpInfo($id, $max_results = '100', $tweet_fields = null, $expansions = null, $media_fields = null, $poll_fields = null, $user_fields = null, $place_fields = null)
    {
        $returnType = '\Swagger\Client\Model\Get2SpacesIdTweetsResponse';
        $request = $this->spaceTweetsRequest($id, $max_results, $tweet_fields, $expansions, $media_fields, $poll_fields, $user_fields, $place_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'spaceTweets'
     *
     * @param  string $id The ID of the Space to be retrieved. (required)
     * @param  int $max_results The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     * @param  string[] $tweet_fields A comma separated list of Tweet fields to display. (optional)
     * @param  string[] $expansions A comma separated list of fields to expand. (optional)
     * @param  string[] $media_fields A comma separated list of Media fields to display. (optional)
     * @param  string[] $poll_fields A comma separated list of Poll fields to display. (optional)
     * @param  string[] $user_fields A comma separated list of User fields to display. (optional)
     * @param  string[] $place_fields A comma separated list of Place fields to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function spaceTweetsRequest($id, $max_results = '100', $tweet_fields = null, $expansions = null, $media_fields = null, $poll_fields = null, $user_fields = null, $place_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling spaceTweets'
            );
        }

        $resourcePath = '/2/spaces/{id}/tweets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($max_results !== null) {
            $queryParams['max_results'] = ObjectSerializer::toQueryValue($max_results, 'int32');
        }
        // query params
        if (is_array($tweet_fields)) {
            $tweet_fields = ObjectSerializer::serializeCollection($tweet_fields, 'csv', true);
        }
        if ($tweet_fields !== null) {
            $queryParams['tweet.fields'] = ObjectSerializer::toQueryValue($tweet_fields, null);
        }
        // query params
        if (is_array($expansions)) {
            $expansions = ObjectSerializer::serializeCollection($expansions, 'csv', true);
        }
        if ($expansions !== null) {
            $queryParams['expansions'] = ObjectSerializer::toQueryValue($expansions, null);
        }
        // query params
        if (is_array($media_fields)) {
            $media_fields = ObjectSerializer::serializeCollection($media_fields, 'csv', true);
        }
        if ($media_fields !== null) {
            $queryParams['media.fields'] = ObjectSerializer::toQueryValue($media_fields, null);
        }
        // query params
        if (is_array($poll_fields)) {
            $poll_fields = ObjectSerializer::serializeCollection($poll_fields, 'csv', true);
        }
        if ($poll_fields !== null) {
            $queryParams['poll.fields'] = ObjectSerializer::toQueryValue($poll_fields, null);
        }
        // query params
        if (is_array($user_fields)) {
            $user_fields = ObjectSerializer::serializeCollection($user_fields, 'csv', true);
        }
        if ($user_fields !== null) {
            $queryParams['user.fields'] = ObjectSerializer::toQueryValue($user_fields, null);
        }
        // query params
        if (is_array($place_fields)) {
            $place_fields = ObjectSerializer::serializeCollection($place_fields, 'csv', true);
        }
        if ($place_fields !== null) {
            $queryParams['place.fields'] = ObjectSerializer::toQueryValue($place_fields, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
