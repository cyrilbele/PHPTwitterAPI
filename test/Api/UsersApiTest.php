<?php
/**
 * UsersApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * OpenAPI spec version: 2.60
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use Swagger\Client\Configuration;
use Swagger\Client\ApiException;
use Swagger\Client\ObjectSerializer;

/**
 * UsersApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for findMyUser
     *
     * User lookup me.
     *
     */
    public function testFindMyUser()
    {
    }

    /**
     * Test case for findUserById
     *
     * User lookup by ID.
     *
     */
    public function testFindUserById()
    {
    }

    /**
     * Test case for findUserByUsername
     *
     * User lookup by username.
     *
     */
    public function testFindUserByUsername()
    {
    }

    /**
     * Test case for findUsersById
     *
     * User lookup by IDs.
     *
     */
    public function testFindUsersById()
    {
    }

    /**
     * Test case for findUsersByUsername
     *
     * User lookup by usernames.
     *
     */
    public function testFindUsersByUsername()
    {
    }

    /**
     * Test case for listGetFollowers
     *
     * Returns User objects that follow a List by the provided List ID.
     *
     */
    public function testListGetFollowers()
    {
    }

    /**
     * Test case for listGetMembers
     *
     * Returns User objects that are members of a List by the provided List ID..
     *
     */
    public function testListGetMembers()
    {
    }

    /**
     * Test case for tweetsIdLikingUsers
     *
     * Returns User objects that have liked the provided Tweet ID.
     *
     */
    public function testTweetsIdLikingUsers()
    {
    }

    /**
     * Test case for tweetsIdRetweetingUsers
     *
     * Returns User objects that have retweeted the provided Tweet ID.
     *
     */
    public function testTweetsIdRetweetingUsers()
    {
    }

    /**
     * Test case for usersIdBlock
     *
     * Block User by User ID.
     *
     */
    public function testUsersIdBlock()
    {
    }

    /**
     * Test case for usersIdBlocking
     *
     * Returns User objects that are blocked by provided User ID.
     *
     */
    public function testUsersIdBlocking()
    {
    }

    /**
     * Test case for usersIdFollow
     *
     * Follow User.
     *
     */
    public function testUsersIdFollow()
    {
    }

    /**
     * Test case for usersIdFollowers
     *
     * Followers by User ID.
     *
     */
    public function testUsersIdFollowers()
    {
    }

    /**
     * Test case for usersIdFollowing
     *
     * Following by User ID.
     *
     */
    public function testUsersIdFollowing()
    {
    }

    /**
     * Test case for usersIdMute
     *
     * Mute User by User ID..
     *
     */
    public function testUsersIdMute()
    {
    }

    /**
     * Test case for usersIdMuting
     *
     * Returns User objects that are muted by the provided User ID.
     *
     */
    public function testUsersIdMuting()
    {
    }

    /**
     * Test case for usersIdUnblock
     *
     * Unblock User by User ID.
     *
     */
    public function testUsersIdUnblock()
    {
    }

    /**
     * Test case for usersIdUnfollow
     *
     * Unfollow User.
     *
     */
    public function testUsersIdUnfollow()
    {
    }

    /**
     * Test case for usersIdUnmute
     *
     * Unmute User by User ID.
     *
     */
    public function testUsersIdUnmute()
    {
    }
}
